/**
 * @fileoverview Firestore Security Rules for CloudTalk application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user can only access their own profile, contacts, and messages.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/contacts/{contactUserId}: Stores contact information for a specific user.
 * - /users/{userId}/contacts/{contactUserId}/messages/{messageId}: Stores chat messages between two users.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document.
 * - Users can only read and write contact documents that belong to them.
 * - Users can only read and write message documents within their own contact lists.
 * - No listing of all users or all contacts is allowed to prevent information leakage.
 *
 * Denormalization for Authorization:
 * The data structure uses path-based ownership to simplify authorization checks.
 * The userId is embedded in the path of contacts and messages, allowing for easy validation of ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *   Incoming data: { id: 'user123', ... }
     * @allow (get) User with ID 'user123' can read their profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (create) User with ID 'user123' cannot create a profile with a different ID.
     *   Incoming data: { id: 'user456', ... }
     * @deny (get) User with ID 'user456' cannot read user 'user123's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isNewOwner(userId) {
        return request.resource.data.id == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed.
      allow create: if isOwner(userId) && isNewOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to contact documents for a specific user.
     * @path /users/{userId}/contacts/{contactUserId}
     * @allow (create) User 'user123' can add contact 'contact456' to their list.
     * @allow (get) User 'user123' can read contact 'contact456' from their list.
     * @allow (update) User 'user123' can update contact 'contact456' in their list.
     * @allow (delete) User 'user123' can delete contact 'contact456' from their list.
     * @deny (create) User 'user456' cannot add a contact to user 'user123's list.
     * @deny (get) User 'user456' cannot read contacts from user 'user123's list.
     * @principle Enforces document ownership for contact management.
     */
    match /users/{userId}/contacts/{contactUserId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat messages between two users.
     * @path /users/{userId}/contacts/{contactUserId}/messages/{messageId}
     * @allow (create) User 'user123' can send a message to 'contact456'.
     * @allow (get) User 'user123' can read a message they sent to 'contact456'.
     * @allow (update) User 'user123' can update a message they sent to 'contact456'.
     * @allow (delete) User 'user123' can delete a message they sent to 'contact456'.
     * @deny (create) User 'user456' cannot send a message as if it were from user 'user123'.
     * @deny (get) User 'user456' cannot read messages from user 'user123's conversations.
     * @principle Enforces document ownership for chat messages.
     */
    match /users/{userId}/contacts/{contactUserId}/messages/{messageId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}