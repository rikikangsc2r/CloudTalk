/**
 * @fileoverview Firestore Security Rules for CloudTalk application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and contacts.
 * Chat room access is granted to participants, ensuring only authorized users can read and write messages.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user themselves.
 * - /users/{userId}/contacts/{contactId}: Stores contacts for each user, accessible only by the user.
 * - /chatRooms/{chatRoomId}: Stores chat room metadata, accessible to participants.
 * - /chatRooms/{chatRoomId}/messages/{messageId}: Stores chat messages within chat rooms, accessible to participants.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data and contacts.
 * - Chat room access is based on participation.
 * - Data validation is minimal in this prototype phase, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - Chat messages store `senderId` and `receiverId` to avoid needing to fetch user documents for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get) - User with ID 'user123' can read their own profile.
     *   - request.auth.uid: 'user123'
     * @allow (update) - User with ID 'user123' can update their own profile.
     *   - request.auth.uid: 'user123'
     * @allow (delete) - User with ID 'user123' can delete their own profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) - User with ID 'user456' cannot create a profile for 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.id: 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their own contacts.
     * @path /users/{userId}/contacts/{contactId}
     * @allow (create) - User with ID 'user123' can create a contact.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @allow (get) - User with ID 'user123' can read their own contact.
     *   - request.auth.uid: 'user123'
     * @allow (update) - User with ID 'user123' can update their own contact.
     *   - request.auth.uid: 'user123'
     * @allow (delete) - User with ID 'user123' can delete their own contact.
     *   - request.auth.uid: 'user123'
     * @deny (create) - User with ID 'user456' cannot create a contact for 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.userId: 'user123'
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/contacts/{contactId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows participants of a chat room to access the chat room data.
     * @path /chatRooms/{chatRoomId}
     * @allow (create) - Anyone can create a chatroom
     *   - request.auth.uid: 'user123'
     * @allow (get) - User with ID 'user123' can read the chat room if they are a participant.
     *   - request.auth.uid: 'user123'
     *   - resource.data.participants: ['user123', 'user456']
     * @allow (update) - User with ID 'user123' can update the chat room if they are a participant.
     *   - request.auth.uid: 'user123'
     *   - resource.data.participants: ['user123', 'user456']
     * @allow (delete) - User with ID 'user123' can delete the chat room if they are a participant.
     *   - request.auth.uid: 'user123'
     *   - resource.data.participants: ['user123', 'user456']
     * @deny (get) - User with ID 'user789' cannot read the chat room if they are not a participant.
     *   - request.auth.uid: 'user789'
     *   - resource.data.participants: ['user123', 'user456']
     * @principle Enforces access control based on chat room participation.
     */
    match /chatRooms/{chatRoomId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant(chatRoomId) {
        return isSignedIn() && request.auth.uid in resource.data.participants;
      }

      function isExistingParticipant(chatRoomId) {
          return isParticipant(chatRoomId) && exists(resource);
      }

      allow get: if isParticipant(chatRoomId);
      allow list: if false;
      allow create: if isSignedIn(); // Open for prototyping, restrict later.
      allow update: if isExistingParticipant(chatRoomId);
      allow delete: if isExistingParticipant(chatRoomId);
    }

    /**
     * @description Allows participants of a chat room to read and write messages within that chat room.
     * @path /chatRooms/{chatRoomId}/messages/{messageId}
     * @allow (create) - User with ID 'user123' can create a message in the chat room if they are a participant.
     *   - request.auth.uid: 'user123'
     *   - get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participants: ['user123', 'user456']
     * @allow (get) - User with ID 'user123' can read a message in the chat room if they are a participant.
     *   - request.auth.uid: 'user123'
     *   - get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participants: ['user123', 'user456']
     * @allow (update) - User with ID 'user123' can update a message in the chat room if they are a participant.
     *   - request.auth.uid: 'user123'
     *   - get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participants: ['user123', 'user456']
     * @allow (delete) - User with ID 'user123' can delete a message in the chat room if they are a participant.
     *   - request.auth.uid: 'user123'
     *   - get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participants: ['user123', 'user456']
     * @deny (create) - User with ID 'user789' cannot create a message in the chat room if they are not a participant.
     *   - request.auth.uid: 'user789'
     *   - get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participants: ['user123', 'user456']
     * @principle Enforces access control based on chat room participation, leveraging get() for subcollection access.
     */
    match /chatRooms/{chatRoomId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant(chatRoomId) {
        return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participants;
      }
      
      function isExistingParticipant(chatRoomId) {
          return isParticipant(chatRoomId) && exists(resource);
      }

      allow get: if isParticipant(chatRoomId);
      allow list: if isParticipant(chatRoomId);
      allow create: if isParticipant(chatRoomId);
      allow update: if isExistingParticipant(chatRoomId);
      allow delete: if isExistingParticipant(chatRoomId);
    }
  }
}